7-base_geometry.txt
===============
testing for the module ''BaseGeometry'' from ''7-base_geometry''.
===============
test that validates value.

start:
 
     >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry


start testing errors:

test commun case:

     >>> bg = BaseGeometry()
     >>> bg.integer_validator("my_int", 12)
     >>> try:
     ...     bg.integer_validator("name", "John")
     ... except Exception as e:
     ...     print("[{}] {}".format(e.__class__.__name__, e))
     [TypeError] name must be an integer
     >>> try:
     ...     bg.integer_validator("age", 0)
     ... except Exception as e:
     ...     print("[{}] {}".format(e.__class__.__name__, e))
     [ValueError] age must be greater than 0
     >>> try:
     ...     bg.integer_validator("distance", -4)
     ... except Exception as e:
     ...     print("[{}] {}".format(e.__class__.__name__, e))
     [ValueError] distance must be greater than 0

     >>> try:
     ...     bg.integer_validator("me", 2)
     ... except Exception as e:
     ...     print("[{}] {}".format(e.__class__.__name__, e))
     
     >>> try:
     ...     bg.integer_validator("Abdo", 1.2)
     ... except Exception as e:
     ...     print("[{}] {}".format(e.__class__.__name__, e))
     [TypeError] Abdo must be an integer

pass an empty name:

     >>> try:
     ...     bg.integer_validator("", 1.2)
     ... except Exception as e:
     ...      print("[{}] {}".format(e.__class__.__name__, e))
     [TypeError]  must be an integer



pass None:

	>>> try:
	...	bg.integer_validator("Abdo", None)
	... except Exception as e:
	...	print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] Abdo must be an integer


pass bool value:

	>>> try:
	...     bg.integer_validator("Abdo", True)
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] Abdo must be an integer


pass zero:

	>>> try:
	...     bg.integer_validator("Abdo", 0)
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	[ValueError] Abdo must be greater than 0


pass float(nan) number:

	>>> try:
	...     bg.integer_validator("Abdo", float('nan'))
	... except Exception as e:
	...	print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] Abdo must be an integer


pass a strnumber:

	>>> try:
	...     bg.integer_validator("Abdo", '2')
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] Abdo must be an integer


pass an integer as name:


	>>> try:
	...     bg.integer_validator(6,"Abdo")
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] 6 must be an integer


test the area method:

	>>> try:
	...	print(bg.area())
	... except Exception as e:                           
	...	print("[{}] {}".format(e.__class__.__name__, e))
	[Exception] area() is not implemented


pass list:

	>>> try:
	...     bg.integer_validator("ali",[1, 2])
	... except Exception as e:                           
	...     print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] ali must be an integer


pass tuple:

	>>> try:
	...     bg.integer_validator("ali",(1, 2))
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] ali must be an integer


pass tpule:


	>>> try:
	...     bg.integer_validator("ali",(1, 2))
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] ali must be an integer


test nurmal mode:

	>>> bg.integer_validator("ali", 0)
	Traceback (most recent call last):
	...
	ValueError: ali must be greater than 0
